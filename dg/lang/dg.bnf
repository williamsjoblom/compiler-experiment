unit = Stmt*						@CompilationUnit;


## Statement.
Stmt = Expr ";"						@ExprStmt
     | FunDecl
     | VarDecl ";"
     | Pln ";"
     | IfStmt
     | Block
     | ReturnStmt ";";

Block = "{" Stmt* "}"					@Block;


## Control flow.
Cond = Expr						@Cond;
IfStmt = "if" "(" Cond ")" Stmt ("else" Stmt)?		@IfStmt;


## Declaration.
FunDecl = "fun" <id> FunSignature Block			@FunDecl;

FunSignature = ParamList ("->" Type)?			@FunSignature;

ParamList = "(" (Param ("," Param)*)? ")" 		@ParamList;
Param = <id> ":" Type					@Param;

VarDecl = "var" <id> ":" Type? ("=" Expr)?		@VarDecl;


## Type.
Type = "(" Type ("," Type)* ")"				@TupleType
     | "(" <id> ":" Type ("," <id> ":" Type)* ")"	@NamedTupleType
     | <id>						@Type;

Pln = "pln" Expr					@Pln;
ReturnStmt = "return" Expr?				@ReturnStmt;


## Expression.
Expr = <num>						@IntLiteral
     | <id>						@VarExpr
     || :group <id> ArgList				@FunCallExpr
     |  :group "(" Expr ")"
     || :left "(" Expr ("," Expr)* ")"	 		@TupleExpr
     || :left Expr "." <num>				@TupleIndexAccess
     |	:left Expr "." <id>				@TupleNameAccess
     || :right "-" Expr					@NegExpr
     || :left Expr "*" Expr 				@MulExpr
     |  :left Expr "/" Expr    				@DivExpr
     || :left Expr "+" Expr				@AddExpr
     |  :left Expr "-" Expr				@SubExpr
     || :right Expr "=" Expr				@AssExpr
     |  :right Expr "==" Expr				@EqExpr
     |  :right Expr ">=" Expr                           @GeExpr
     |  :right Expr "<=" Expr                           @LeExpr
     |  :right Expr ">" Expr                            @GExpr
     |  :right Expr "<" Expr                            @LExpr;

ArgList =  "(" (Expr ("," Expr)*)? ")"			@ArgList;
